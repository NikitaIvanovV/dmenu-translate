#!/bin/sh

echo_err() {
	notify-send -u critical "$0 error" "$1"
}

err() {
	echo_err "$1"
	exit 1
}

check_dep() {
	command -v "$1" > /dev/null || err "$1 is required: $2"
}

# We don't check if dmenu is installed because someone
# may want to replace it via DMENU vars
check_dep trans https://github.com/soimort/translate-shell
check_dep xclip https://github.com/astrand/xclip
check_dep notify-send

load_config() {
	config_dir="${XDG_CONFIG_HOME:-$HOME/.config}/dmenu-translate"
	[ -d "$config_dir" ] || mkdir -p "$config_dir"

	config_file="$config_dir/config.conf"
	[ -f "$config_file" ] || cat > "$config_file" <<-EOF
		# Languages that appear in the menu
		TRANS_LANGS='ru en'

		# You can change the following settings to replace dmenu
		# with a different utility or set your options
		DMENU_TEXT=''
		DMENU_LANG=''
		DMENU_NEXT=''

		# Set this to any value if you want always copy the
		# translation
		ALWAYS_COPY=

		# Clipboard command must receive text from standard input
		CLIP_CMD='xclip -i -r -selection clipboard'
	EOF

	. "$config_file"

	# Default values
	: "${DMENU_TEXT:=dmenu -p 'Translate: Text'}"
	: "${DMENU_LANG:=dmenu -p 'Translate: Into'}"
	: "${DMENU_NEXT:=dmenu -i -p 'Translate: Next?'}"
	: "${TRANS_LANGS:=ru en}"

	# Check others
	[ -z "$CLIP_CMD" ] && err 'CLIP_CMD setting cannot be empty!'
}

formatmenu() {
	echo "$1" | tr '\n' '  ' | sed 's/\s\{3,\}//g; s/^\(.\{30\}\).\+/\1.../; s/$/\n/'
}

get_selection() {
	[ -n "$1" ] && sel='clipboard' || sel='primary'
	xclip -selection "$sel" -o 2>/dev/null
}

clip_menu() {
	{ formatmenu "$1"; formatmenu "$2"; } |
		sed 's/^\s*$//; 1s/^./Primary: &/; 2s/^./Clipboard: &/' |
		sed '/^$/d'
}

lang_menu() {
	echo "$TRANS_LANGS" | sed 's/\s\+/\n/g' | sed '/:/!s/^/:/'
	echo '[Define]'
}

choose_next() {
	if [ -n "$ALWAYS_COPY" ]; then
		echo 'Copy'
	else
		eval "$DMENU_NEXT" <<-EOF
			Copy: $(formatmenu "$1")
			Copy temp file name
			View
		EOF
	fi
}

save_file() (
	tmp="$(mktemp --tmpdir 'dmenu-translate.XXXXXX')"
	echo "$1" > "$tmp"
	echo "$tmp"
)

open_term() {
	${TERMINAL:-'xterm'} -e ${PAGER:-'less'} "$(save_file "$1")"
}

get_text() {
	echo "$2" | while IFS= read -r clip; do
	[ "$1" = "$clip" ] && {
		type="$(echo "$clip" | sed 's/^\(\w\+\):.*/\1/')"
			case "$type" in
				Primary)   echo "$primary"   ;;
				Clipboard) echo "$clipboard" ;;
			esac
			exit 10
		}
	done

	# If not found, just echo text
	[ $? -ne 10 ] && echo "$1"
}

# Config
load_config

# Get selections
clipboard="$(get_selection clip)"
primary="$(get_selection)"

[ "$clipboard" = "$primary" ] && primary=

clip_menu="$(clip_menu "$primary" "$clipboard")"

# Enter text
text="$(printf '%s' "$clip_menu" | eval "$DMENU_TEXT")" || exit 0
text="$(get_text "$text" "$clip_menu")"

# Choose target language
target="$(lang_menu | eval "$DMENU_LANG")" || exit 0

# If Define chosen, define term and exit
[ "$target" = '[Define]' ] && {
	dict="$(trans -dictionary "$text")"
	open_term "$(trans -dictionary "$text")"
	exit 0
}

# Translate text
translation="$(trans -b "$target" "$text")"
[ -z "$translation" ] && err 'Failed to translate'

case "$(choose_next "$translation")" in
	'View')                open_term "$translation"; exit 0 ;;
	'Copy temp file name') output="$(save_file "$translation")" ;;
	'Copy'*)               output="$translation" ;;
	*)                     exit 0 ;;
esac

echo "$output" | eval "$CLIP_CMD" || err 'Failed to copy! Is CLIP_CMD setting set properly?'

notify-send 'dmenu-translate' 'Translation copied to clipboard!'
